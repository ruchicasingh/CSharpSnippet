using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the minimumSwaps function below.
    static int minimumSwaps(int[] arr) {
        int swaps= 0;
        if (arr== null || arr.Length==0)
        {
            return 0;
        }
        int l = arr.Length;
        Dictionary<int,int> d= new Dictionary<int,int>();
        int[] arr1= new int[l];
        arr1=arr.OrderBy(c=>c).ToArray();
        
        int v;
        int v2;
        for (int i = 0; i<l;i++)
        {
            d.Add(arr[i],i);
        }
        for (int i = 0;i<l;i++)
        {   
            v=arr[i];  
            if(v!=arr1[i])
            {
                v2=arr1[i];
                arr[i]=v2;
                arr[d[v2]]=v;
                d[v]=d[v2];
                d[v2]=i;
                swaps=swaps+1;
            }
        }
        return swaps;

    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        int[] arr = Array.ConvertAll(Console.ReadLine().Split(' '), arrTemp => Convert.ToInt32(arrTemp))
        ;
        int res = minimumSwaps(arr);

        textWriter.WriteLine(res);

        textWriter.Flush();
        textWriter.Close();
    }
}
