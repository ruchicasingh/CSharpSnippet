public class Solution {
    public bool RepeatedSubstringPattern(string s) {
        if(s==null ||s.Length<=1)
        {
            return false;
        }
        int l= s.Length;
        bool result = false;        
        Dictionary<char,int> dict = new Dictionary<char,int>();
        string pattern = String.Empty;
        int max=0;
        int min=0;
        for(int i=0 ;i<l;i++)
        {
           if(dict.ContainsKey(s[i]))
           {
               dict[s[i]]= dict[s[i]]+1;
               if(dict[s[i]]>max)
               {
                   max++;
               }
           }
           else
           {
               dict.Add(s[i],1);
           }
        }
        
        min = dict.Values.Min();
        
        if(min==1)
        {
            return false;
        }
        else
        {
            for(int i=min;i>=1;i--)
            {
                if (l%i==0)
                {
                    int size = l/i;
                    pattern= s.Substring(0,size);
                    Console.WriteLine(pattern);
                    int rep=size;
                    while (rep<=(l-size))
                    {
                        if(pattern==s.Substring(rep,size))
                        {
                            result = true;
                        }
                        else
                        {
                            result=false;
                            break;
                        }
                        rep=rep+size;
                    }
                    if(result)
                    {
                        return true;
                    }
                }
            
            }
        }
                
        return result;
    }
}
